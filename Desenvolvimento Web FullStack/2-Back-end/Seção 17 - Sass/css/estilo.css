@charset "UTF-8";
/* h2 {
  color: black;
} */

/* Aninhamento e referenciando seletor pai*/
/* #conteudo {
  background: green;
  padding: 15px;
}
#conteudo h1, #conteudo h2 {
  color: black;
}
#conteudo a {
  color: red;
}
#conteudo a:hover {
  color: yellow;
} */

/* Variáveis */
/* h2, h3 {
  color: red;
} */

/* Escopo */
/* #rodape {
  background-color: green;
}

h2 {
  color: blue;
} */

/* Interpolação */
/* .vermelho {
  color: vermelho;
} */

/* For - through e to - para onde, dê e até onde, usando trough o '3' está incluso, utilizando 'to' é apenas até 3, sem inclui-lo */
/* .item-1 {
  background: green;
  margin-bottom: 2px;
}

.item-2 {
  background: green;
  margin-bottom: 2px;
}

.item-3 {
  background: green;
  margin-bottom: 2px;
} */

/* while */
/* .item-1 {
  background: orange;
  margin-bottom: 2px;
}

.item-2 {
  background: orange;
  margin-bottom: 2px;
}

.item-3 {
  background: orange;
  margin-bottom: 2px;
}

.item-4 {
  background: orange;
  margin-bottom: 2px;
} */

/* each - usado para criação de listas - para cada cor dentro da lista */
/* .item-1 {
  background: green;
  margin-bottom: 2px;
}

.item-2 {
  background: yellow;
  margin-bottom: 2px;
}

.item-3 {
  background: red;
  margin-bottom: 2px;
} */

/* Retorna quantos % uma coluna (recebida por parâmetro) representa no sistema de grids. Existem funções nativas muito úteis também com: percentage */
/* .col-1 {
  width: 8.3333333333%;
  background: green;
}

.col-2 {
  width: 16.6666666667%;
  background: green;
}

.col-3 {
  width: 25%;
  background: green;
}

.col-4 {
  width: 33.3333333333%;
  background: green;
}

.col-5 {
  width: 41.6666666667%;
  background: green;
}

.col-6 {
  width: 50%;
  background: green;
}

.col-7 {
  width: 58.3333333333%;
  background: green;
}

.col-8 {
  width: 66.6666666667%;
  background: green;
}

.col-9 {
  width: 75%;
  background: green;
}

.col-10 {
  width: 83.3333333333%;
  background: green;
}

.col-11 {
  width: 91.6666666667%;
  background: green;
}

.col-12 {
  width: 100%;
  background: green;
} */

/* Mixin -> uma maneira de reaproveitar as estruturas que se repetem */
h1 {
  color: white;
  background: green;
  padding: 10px 5px;
}

h2 {
  color: green;
  background: green;
  padding: 10px 5px;
}

/* Herança com múltiplas diretivas */
.classe1, .vermelho {
  color: red;
}

.classe2, .vermelho {
  background: black;
}

/* Encadeamento de diretivas */
.classePai, .classeFilho, .erro {
  color: red;
}

.classeFilho, .erro {
  background: black;
}

.erro {
  padding: 10px;
}

/* Placeholders servem para criar classes que não são processadas, ou seja se eu adicionar ao invés de ponto o símbolo de porcentagem na classePai e filho, a classe erro segue herdando, mas as classes acima n são criadas em css */
/* Diretivas de controle */
p {
  color: white;
}

/* Diretivas de controle e Mixin */
body {
  background-color: red;
  color: white;
}


/*# sourceMappingURL=estilo.css.map */
